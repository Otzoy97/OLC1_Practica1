package analizador;

import java_cup.runtime.Symbol;
import graficador.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.HashMap;

parser code {:
    public ArrayList<Variable> listaVariable = new ArrayList();
    public ArrayList<Grafica> listaGrafica = new ArrayList();
    public ArrayList<Galeria> listaGaleria = new ArrayList();

    /*Grafica*/
    public String id_, nombre_, titulox_, tituloy_;
    /*Grafica Barras*/
    public LinkedList<String> ejeX_ = null;
    public LinkedList<Integer> ejeY_ = null;
    public HashMap<Integer,Integer> puntosxy_ = null;

    /*Gráfica Líneas*/
    public LinkedList<XYLine> xylines_ = null;
    /*Lineas de grafica de lineas :v*/
    //private XYLine xyline_ = null;
    public String nombreLinea, colorLinea;
    public int grosorLinea;
    public HashMap<Integer,Integer> pxyline = null;
    /*Galeria*/
    public String carpeta;
    public LinkedList <String> nombreGraficas;

    /*Errores*/
    public void syntax_error (Symbol s){
        Scanner.Err += "Leve. Línea " + s.right + ", Columna " + s.left + ". Identificador " + s.value + "\n";
    }
    public void unrecovered_syntax_error(Symbol s){ 
        Scanner.Err += "Grave. Línea " + s.right + ", Columna " + s.left + ". Identificador " + s.value +"\n";
    }
    /**
     * @param idVar identificador de la variable buscar
     * return valor doble que se identificó
     */
    public double getValue(String idVar){
        double cifra = 0;
        for(Variable var : listaVariable){
            if(var.getNombre().equals(idVar)){
                cifra = var.getCifra();
            }
        }
        return cifra;
    }
    /**
     * @param idVar identificador de la variable buscar
     * return cadena que se identificó
     */
    public String getString(String idVar){
        String valor = "";
        for(Variable var : listaVariable){
            if(var.getNombre().equals(idVar)){
                valor = var.getTexto();
            }
        }
        return valor;
    }
:}

action code {:

:}

/*Terminales*/
//AGRUPACION
terminal String ABRIR_PARENTESIS, CERRAR_PARENTESIS, ABRIR_LLAVE, CERRAR_LLAVE, ABRIR_CORCHETE, CERRAR_CORCHETE, ABRIR_INTERROGACION, CERRAR_INTERROGACION;
//SIGNOS VARIOS
terminal String IGUAL, COLON, SEMICOLON, COMA;
//SIGNOS DE OPERACIÓN
terminal String MAS, MENOS, PRODUCTO, DIVISION;
//VARIABLES
terminal String DEFINIR, STRING,INT;
//LETRAS Y NUMEROS
terminal String CADENA, IDENTIFICADOR,  ENTERO;
//GRAFICAS
terminal String GRAFICABARRAS, GRAFICALINEAS;
//GRAFICABARRAS
terminal String ID, TITULO, TITULOX, TITULOY, EJEX, EJEY, PUNTOSXY;
//GRAFICALINEAS
terminal String DEFINIRXYLINE, NOMBRE, COLOR, GROSOR, PUNTOS;
//GALERIA
terminal String GALERIA;
/*No Terminales*/
non terminal String INICIO;
//Definición de variables y operatoria de enteros
non terminal String DEFVAR, DEFOPER;
//BODYS
non terminal String  BODY, SUBBODY;
//GraficaBarras, Grafica Lineas, Galeria
non terminal String GRAPHBAR, GRAPHLINE, GALGAL;
//GraficaBarras B (BODYBARRAS), L (LABELS), EJX (EJEX), EJY (EJEY), PXY (PUNTOSXY)
non terminal String BODYBARRAS, EJX, EJY, PXY;
non terminal String SUBBODYBARRAS, GBVARSTR, GBVARINT;
//GraficaLineas C (BODYLINEAS), LL (LABELS), XYL (DEFINIRXYLINE), PXYL (PUNTOSXYL)
non terminal String BODYLINEAS, XYL, SUBXYL, PXYL;
non terminal String SUBBODYLINEAS, GLVARSTR, GLVARINT;
//Galeria G(BODYGALERAS), DIR (DIRECCION), GID (GRAFICASID)
non terminal String GAL, DIR , GID, SUBGID;
//non terminal SUBINICIO;
/*Precedencia*/
precedence left MAS, MENOS;
precedence left PRODUCTO, DIVISION;
/*GRAMATICA*/
start with INICIO;

///----------------------------------------------------------
INICIO::= DEFINIR:a ABRIR_LLAVE DEFVAR:b CERRAR_LLAVE BODY:c GALGAL:d
{:
    //System.out.println( (RESULT=a+"{"+b+"}" /*+ c + d*/) );
:};
///--------------------DEFICINICIÓN DE VARIABLES--------------------------
DEFVAR::= DEFVAR:a STRING IDENTIFICADOR:b IGUAL CADENA:c SEMICOLON
{:
    //System.out.println( (RESULT=a+"\n"+"string "+b+" = "+c+";") );
    //RESULT = a;
    listaVariable.add(new Variable("string",b,c));
:} 
| DEFVAR:a INT IDENTIFICADOR:b IGUAL DEFOPER:c SEMICOLON
{:
    //System.out.println( (RESULT=a+"\n"+"int "+b+" = "+c+";") );
    //RESULT =a;
    listaVariable.add(new Variable("int",b,Double.parseDouble(c+"")));
:}
| STRING IDENTIFICADOR:b IGUAL CADENA:c SEMICOLON
{:
    //System.out.println( (RESULT="string "+b+" = "+c+";") );
    listaVariable.add(new Variable("string",b,c));
:} 
| INT IDENTIFICADOR:b IGUAL DEFOPER:c SEMICOLON
{:
    //System.out.println( (RESULT="int "+b+" = "+c+";") );
    listaVariable.add(new Variable("int",b,Double.parseDouble(c+"")));
:};
///---------------------OPERATORIA-----------------
DEFOPER::= DEFOPER:a MAS DEFOPER:b
{:
    RESULT=String.valueOf(Double.parseDouble(a+"")+Double.parseDouble(b+""));
:}
| DEFOPER:a PRODUCTO DEFOPER:b
{:
    RESULT=String.valueOf(Double.parseDouble(a+"")*Double.parseDouble(b+""));
:}
| DEFOPER:a MENOS DEFOPER:b
{:
    RESULT=String.valueOf(Double.parseDouble(a+"")-Double.parseDouble(b+""));
:}
| DEFOPER:a DIVISION DEFOPER:b
{:
    RESULT=String.valueOf(Double.parseDouble(a+"")/Double.parseDouble(b+""));
:}
| ABRIR_PARENTESIS DEFOPER:a CERRAR_PARENTESIS
{:
    RESULT = a;
:}
| ENTERO:a 
{:
    RESULT = a;
:};
///-----------------CUERPO DEL PROGRAMA------------------------
BODY::= BODY SUBBODY
{::}
| SUBBODY
{::};
SUBBODY::= GRAPHBAR
{::}
| GRAPHLINE
{::};
///----------------------GRAFICO DE BARRAS----------------------
GRAPHBAR::= GRAFICABARRAS ABRIR_LLAVE BODYBARRAS CERRAR_LLAVE
{:
    listaGrafica.add(new Barras(id_,nombre_,titulox_,tituloy_,ejeX_,ejeY_,puntosxy_));
:};
///CUERPO PRINCIPAL
BODYBARRAS::= BODYBARRAS SUBBODYBARRAS
{::}
| SUBBODYBARRAS
{::};
///INSTRUCCIONES OBLIGATORIAS
SUBBODYBARRAS::= ID COLON GBVARSTR:a SEMICOLON 
{:
    id_ = a;
:}
| TITULO COLON GBVARSTR:a SEMICOLON 
{:
    nombre_ = a;
:}
| TITULOX COLON GBVARSTR:a SEMICOLON 
{:
    titulox_ = a;
:}
| TITULOY COLON GBVARSTR:a SEMICOLON 
{:
    tituloy_ = a;
:}
| EJEY COLON ABRIR_CORCHETE EJY CERRAR_CORCHETE SEMICOLON
{:
:}
| EJEX COLON ABRIR_CORCHETE EJX CERRAR_CORCHETE SEMICOLON
{:
:}
| PUNTOSXY COLON ABRIR_CORCHETE PXY CERRAR_CORCHETE SEMICOLON
{:
:};
///EJE Y
EJY::= EJY COMA GBVARINT:a
{:
    Double dob01 = Double.parseDouble(a);
    ejeY_.add(dob01.intValue());
:}
| GBVARINT:a
{:
    Double dob01 = Double.parseDouble(a);
    ejeY_ = new LinkedList();
    ejeY_.add(dob01.intValue());
:};
//EJE X
EJX::=EJX COMA GBVARSTR:a
{:
    ejeX_.add(a);
:}
| GBVARSTR:a
{:
    ejeX_ = new LinkedList();
    ejeX_.add(a);
:};
///PUNTOS XY
PXY::= PXY COMA ABRIR_LLAVE GBVARINT:a COMA GBVARINT:b CERRAR_LLAVE
{:
    Double dob01 = Double.parseDouble(a);
    Double dob02 = Double.parseDouble(b);
    puntosxy_.put(dob01.intValue(),dob02.intValue());
:}
| ABRIR_LLAVE GBVARINT:a COMA GBVARINT:b CERRAR_LLAVE
{:
    Double dob01 = Double.parseDouble(a);
    Double dob02 = Double.parseDouble(b);
    puntosxy_ = new HashMap();
    puntosxy_.put(dob01.intValue(),dob02.intValue());
:};
///ENTERO O VARIABLE
GBVARSTR::= IDENTIFICADOR:a
{:
    RESULT = getString(a);
:}
| CADENA:a
{:
    RESULT = a;
:};
///CADENA O VARIABLE
GBVARINT::= IDENTIFICADOR:a
{:
    RESULT = getValue(a)+"";
:}
| DEFOPER:a
{:
    RESULT = a;
:};
///---------------------GRAFICO DE LINEAS ----------------------
GRAPHLINE::= GRAFICALINEAS ABRIR_LLAVE BODYLINEAS CERRAR_LLAVE
{:
    listaGrafica.add(new Lineas(id_,nombre_,titulox_,tituloy_,xylines_));
:};
///CUERPO PRINCIPAL
BODYLINEAS::= BODYLINEAS SUBBODYLINEAS
{::}
| SUBBODYLINEAS
{::};
///INSTRUCCIONES OBLIGATORIAS
SUBBODYLINEAS::= ID COLON GLVARSTR:a SEMICOLON 
{:
    id_ = a;
:}
| TITULO COLON GLVARSTR:a SEMICOLON 
{:
    nombre_ = a;
:}
| TITULOX COLON GLVARSTR:a SEMICOLON
{:
    titulox_ = a;
:}
| TITULOY COLON GLVARSTR:a SEMICOLON
{:
    tituloy_ = a;
:}
| DEFINIRXYLINE ABRIR_INTERROGACION XYL CERRAR_INTERROGACION
{::};
//XYL
XYL::= XYL SUBXYL
{:
    xylines_.add(new XYLine(nombreLinea, colorLinea, grosorLinea, pxyline));
:}
| SUBXYL
{:
    xylines_ = new LinkedList();
    xylines_.add(new XYLine(nombreLinea, colorLinea, grosorLinea, pxyline));
:};
SUBXYL::= NOMBRE COLON GLVARSTR:a SEMICOLON
{:
    nombreLinea = a;
:}
| COLOR COLON GLVARSTR:a SEMICOLON
{:
    colorLinea = a;
:}
| GROSOR COLON GLVARINT:a SEMICOLON 
{:
    Double dob01 = Double.parseDouble(a);
    grosorLinea = dob01.intValue();
:}
| PUNTOS COLON ABRIR_CORCHETE PXYL CERRAR_CORCHETE SEMICOLON
{::};
///PXYL
PXYL::= PXYL COMA ABRIR_LLAVE GLVARINT:a COMA GLVARINT:b CERRAR_LLAVE
{:
    Double dob01 = Double.parseDouble(a);
    Double dob02 = Double.parseDouble(b);

    pxyline.put(dob01.intValue(),dob02.intValue());
:}
| ABRIR_LLAVE GLVARINT:a COMA GLVARINT:b CERRAR_LLAVE
{:
    Double dob01 = Double.parseDouble(a);
    Double dob02 = Double.parseDouble(b);

    pxyline = new HashMap();
    pxyline.put(dob01.intValue(),dob02.intValue());
:};
//GLVARINT
GLVARINT::= IDENTIFICADOR:a
{:
    RESULT = getValue(a)+"";
:}
| DEFOPER:a 
{:
    RESULT = a;
:};
//GLVARSTR
GLVARSTR::= IDENTIFICADOR:a
{:
    RESULT = getString(a);
:}
| CADENA:a
{:
    RESULT = a;
:};
///--------------------- GALERIA ----------------------
GALGAL::= GALERIA ABRIR_LLAVE GAL CERRAR_LLAVE
{::};
GAL::= GAL GALERIA ABRIR_PARENTESIS DIR:a COMA GID CERRAR_PARENTESIS SEMICOLON
{:
    listaGaleria.add(new Galeria(a,nombreGraficas));
:}
| GALERIA ABRIR_PARENTESIS DIR:a COMA GID CERRAR_PARENTESIS SEMICOLON
{:
    listaGaleria.add(new Galeria(a,nombreGraficas));
:};
DIR::= CADENA:a
{:
    RESULT = a;
:}
| IDENTIFICADOR:a
{:
    RESULT = getString(a);
:};
GID::= GID COMA SUBGID:b
{:
    nombreGraficas.add(b);
:}
| SUBGID:a
{:
    nombreGraficas = new LinkedList();
    nombreGraficas.add(a);
    RESULT = a; 
:};
SUBGID::= CADENA:a
{:
    RESULT = a;
:}
| IDENTIFICADOR:a
{:
    RESULT = getString(a);
:};